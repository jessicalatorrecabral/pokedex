{"ast":null,"code":"var _jsxFileName = \"C:\\\\pokedexJess\\\\pokedex\\\\pokedex\\\\src\\\\global\\\\GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios'; //import BASE_URL from '../constants/urls/urls'\n\nimport GlobalStateContext from './GlobalStateContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GlobalState = props => {\n  _s();\n\n  const [pokemonNames, setPokemonNames] = useState([]);\n  const [pokemons, setPokemons] = useState([]);\n  const [pokedex, setPokedex] = useState([]);\n  console.log(pokemons);\n  console.log(pokedex);\n  useEffect(() => {\n    getPokemons();\n  }, []);\n  useEffect(() => {\n    const pokemonList = [];\n    pokemonNames.forEach(poke => {\n      axios.get(poke.url).then(response => {\n        pokemonList.push(response.data); // if(pokemonList.length === 20){\n\n        const orderedPokemonsList = pokemonList.sort((a, b) => {\n          return a.id - b.id;\n        });\n        setPokemons(orderedPokemonsList);\n      }).catch(err => {\n        console.log(err.message);\n      });\n    });\n  }, [pokemonNames]);\n\n  const getPokemons = () => {\n    axios.get('https://pokeapi.co/api/v2/pokemon').then(response => {\n      setPokemonNames(response.data.results);\n      console.log(pokemonNames);\n    }).catch(err => {\n      console.log(err.message);\n    });\n  };\n\n  const data = {\n    pokemons,\n    setPokemons,\n    pokedex,\n    setPokedex\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalStateContext.Provider, {\n    value: data,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GlobalState, \"3IOi7wr6U7cMwTXqIOsZfSmqlLA=\");\n\n_c = GlobalState;\nexport default GlobalState;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalState\");","map":{"version":3,"sources":["C:/pokedexJess/pokedex/pokedex/src/global/GlobalState.js"],"names":["React","useEffect","useState","axios","GlobalStateContext","GlobalState","props","pokemonNames","setPokemonNames","pokemons","setPokemons","pokedex","setPokedex","console","log","getPokemons","pokemonList","forEach","poke","get","url","then","response","push","data","orderedPokemonsList","sort","a","b","id","catch","err","message","results","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAE3B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAyBV,QAAQ,CAAC,EAAD,CAAvC;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AAEAV,EAAAA,SAAS,CAAC,MAAK;AACXc,IAAAA,WAAW;AACd,GAFQ,EAEP,EAFO,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMe,WAAW,GAAG,EAApB;AACAT,IAAAA,YAAY,CAACU,OAAb,CAAsBC,IAAD,IAAU;AAC3Bf,MAAAA,KAAK,CAACgB,GAAN,CAAUD,IAAI,CAACE,GAAf,EACCC,IADD,CACOC,QAAD,IAAc;AAChBN,QAAAA,WAAW,CAACO,IAAZ,CAAiBD,QAAQ,CAACE,IAA1B,EADgB,CAEjB;;AACK,cAAMC,mBAAmB,GAAGT,WAAW,CAACU,IAAZ,CAAiB,CAACC,CAAD,EAAGC,CAAH,KAAS;AAClD,iBAAOD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAAhB;AACH,SAF2B,CAA5B;AAGAnB,QAAAA,WAAW,CAACe,mBAAD,CAAX;AAGP,OAVD,EAWCK,KAXD,CAWQC,GAAD,IAAQ;AACXlB,QAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAG,CAACC,OAAhB;AAEH,OAdD;AAeH,KAhBD;AAkBH,GApBQ,EAoBP,CAACzB,YAAD,CApBO,CAAT;;AAsBA,QAAMQ,WAAW,GAAG,MAAM;AACtBZ,IAAAA,KAAK,CAACgB,GAAN,CAAU,mCAAV,EACCE,IADD,CACOC,QAAD,IAAa;AACfd,MAAAA,eAAe,CAACc,QAAQ,CAACE,IAAT,CAAcS,OAAf,CAAf;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACH,KAJD,EAKCuB,KALD,CAKQC,GAAD,IAAO;AACVlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAG,CAACC,OAAhB;AACH,KAPD;AAQH,GATD;;AAWA,QAAMR,IAAI,GAAG;AAACf,IAAAA,QAAD;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,GAAb;AAEA,sBACI,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEY,IAApC;AAAA,cACKlB,KAAK,CAAC4B;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CArDD;;GAAM7B,W;;KAAAA,W;AAuDN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n//import BASE_URL from '../constants/urls/urls'\r\nimport GlobalStateContext from './GlobalStateContext'\r\n\r\nconst GlobalState = (props) => {\r\n\r\n    const [pokemonNames, setPokemonNames] = useState([])\r\n    const [pokemons, setPokemons] = useState([])\r\n    const [pokedex, setPokedex ] = useState([])\r\n\r\n    console.log(pokemons)\r\n    console.log(pokedex)\r\n\r\n    useEffect(()=> {\r\n        getPokemons()\r\n    },[])\r\n\r\n    useEffect(()=> {\r\n        const pokemonList = []\r\n        pokemonNames.forEach((poke) => {\r\n            axios.get(poke.url)\r\n            .then((response) => {\r\n                pokemonList.push(response.data)\r\n               // if(pokemonList.length === 20){\r\n                    const orderedPokemonsList = pokemonList.sort((a,b) => {\r\n                        return a.id - b.id\r\n                    })\r\n                    setPokemons(orderedPokemonsList)\r\n                \r\n\r\n            })\r\n            .catch((err)=> {\r\n                console.log(err.message)\r\n\r\n            })\r\n        })\r\n\r\n    },[pokemonNames])\r\n\r\n    const getPokemons = () => {\r\n        axios.get('https://pokeapi.co/api/v2/pokemon')\r\n        .then((response)=> {\r\n            setPokemonNames(response.data.results)\r\n            console.log(pokemonNames)\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err.message)\r\n        })\r\n    }\r\n\r\n    const data = {pokemons, setPokemons, pokedex, setPokedex }\r\n\r\n    return(\r\n        <GlobalStateContext.Provider value={data}>\r\n            {props.children}\r\n        </GlobalStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GlobalState"]},"metadata":{},"sourceType":"module"}